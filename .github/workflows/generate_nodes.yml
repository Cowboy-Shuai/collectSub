#https://github.com/mariahlamb/proxy-sub
name: generate_nodes

on:
  push:
    paths:
      - 'sub/sub_all_clash.txt'
      - 'generate_nodes.py'
      - 'requirements.txt'
  workflow_dispatch:
    inputs:
      strict_dedup:
        description: 'Use strict deduplication mode (consider network and security_method)'
        required: false
        default: 'true'
  schedule:
    - cron: '0 0,12 * * *' # 每天 UTC 00:00 和 12:00 运行

jobs:
  generate-nodes-list:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Cache virtual environment
        uses: actions/cache@v4
        id: cache-venv
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Create virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Generate Nodes
        run: |
          source venv/bin/activate
          set -x
          STRICT_DEDUP=${{ github.event.inputs.strict_dedup || 'true' }}
          python generate_nodes.py --strict_dedup=$([[ "$STRICT_DEDUP" == "true" ]] && echo "" || echo "--no-strict_dedup") || { echo "Script failed"; cat generate_nodes.log; exit 1; }
        env:
          PYTHONUNBUFFERED: 1 # 确保日志实时输出
        continue-on-error: false

      - name: Validate output files
        run: |
          shopt -s nullglob # 避免 glob 匹配空时出错
          OUTPUT_FILES=(output/all_nodes_*.txt)
          if [ ${#OUTPUT_FILES[@]} -eq 0 ]; then
            echo "Error: No output files found in output/all_nodes_*.txt"
            exit 1
          fi
          TOTAL_LINES=0
          for file in "${OUTPUT_FILES[@]}"; do
            if [ ! -s "$file" ]; then
              echo "Error: $file is empty"
              exit 1
            fi
            # 简单验证文件内容（检查是否包含有效节点前缀）
            if ! grep -qE '^(ss|ssr|vmess|vless|trojan|hysteria|hy|hy2)://' "$file"; then
              echo "Error: $file contains no valid node URLs"
              exit 1
            fi
            LINES=$(wc -l < "$file")
            TOTAL_LINES=$((TOTAL_LINES + LINES))
            echo "Node count in $file: $LINES"
          done
          echo "Total node count: $TOTAL_LINES"
          # 输出统计信息（从日志提取）
          echo "=== Node Processing Stats ==="
          grep -A 10 "=== 节点处理统计 ===" generate_nodes.log || echo "No stats found in log"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nodes
          path: output/all_nodes_*.txt
          if-no-files-found: error

      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add output/all_nodes_*.txt
          if git diff --quiet --staged; then
            echo "No changes to commit"
            exit 0
          fi
          TOTAL_NODES=$(wc -l output/all_nodes_*.txt | tail -n 1 | awk '{print $1}')
          git commit -m "Update Nodes List: $TOTAL_NODES nodes [skip ci]"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
